{"ast":null,"code":"var _jsxFileName = \"C:\\\\Codecademy\\\\flashcards-starting-code-react-v18\\\\src\\\\features\\\\cards\\\\Card.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n// import selector\nimport { selectCardById } from './cardsSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Card({\n  cardId\n}) {\n  _s();\n  //const card = {}; // replace this with a call to your selector to get a card by id\n  //const [flipped, setFlipped] = useState(false);\n\n  // Retrieve the card details for the given cardId from state\n  const card = useSelector(state => selectCardById(state, cardId));\n  const [isFlipped, setIsFlipped] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"card\",\n      onClick: e => setFlipped(!flipped),\n      children: flipped ? card.back : card.front\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(Card, \"sPn17S8sHVVBtc/7CH/YmCWKQzo=\", false, function () {\n  return [useSelector];\n});\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useState","useSelector","selectCardById","jsxDEV","_jsxDEV","Card","cardId","_s","card","state","isFlipped","setIsFlipped","children","className","onClick","e","setFlipped","flipped","back","front","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Codecademy/flashcards-starting-code-react-v18/src/features/cards/Card.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n// import selector\nimport { selectCardById } from './cardsSlice';\n\nexport default function Card({ cardId  }) {\n  //const card = {}; // replace this with a call to your selector to get a card by id\n  //const [flipped, setFlipped] = useState(false);\n  \n  // Retrieve the card details for the given cardId from state\n  const card = useSelector(state => selectCardById(state, cardId));\n  const [isFlipped, setIsFlipped] = useState(false);\n\n\n  return (\n    <li>\n      <button className=\"card\" onClick={(e) => setFlipped(!flipped)}>\n        {flipped ? card.back : card.front}\n      </button>\n    </li>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC;AACA,SAASC,cAAc,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,IAAIA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACxC;EACA;;EAEA;EACA,MAAMC,IAAI,GAAGP,WAAW,CAACQ,KAAK,IAAIP,cAAc,CAACO,KAAK,EAAEH,MAAM,CAAC,CAAC;EAChE,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAGjD,oBACEI,OAAA;IAAAQ,QAAA,eACER,OAAA;MAAQS,SAAS,EAAC,MAAM;MAACC,OAAO,EAAGC,CAAC,IAAKC,UAAU,CAAC,CAACC,OAAO,CAAE;MAAAL,QAAA,EAC3DK,OAAO,GAAGT,IAAI,CAACU,IAAI,GAAGV,IAAI,CAACW;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAET;AAAChB,EAAA,CAhBuBF,IAAI;EAAA,QAKbJ,WAAW;AAAA;AAAAuB,EAAA,GALFnB,IAAI;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}