{"ast":null,"code":"var _jsxFileName = \"C:\\\\Codecademy\\\\flashcards-starting-code-react-v18\\\\src\\\\features\\\\cards\\\\Card.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n// import selector\nimport { selectCardById } from './cardsSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Card({\n  cardId\n}) {\n  _s();\n  //const card = {}; // replace this with a call to your selector to get a card by id\n  const [flipped, setFlipped] = useState(false);\n  // Retrieve the card details for the given cardId from state\n  const card = useSelector(state => selectCardById(state, cardId));\n  const [isFlipped, setIsFlipped] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"card\",\n      onClick: e => setFlipped(!flipped),\n      children: flipped ? card.back : card.front\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(Card, \"JleyTuMKKGBqhCTKuaUhmZxb4KM=\", false, function () {\n  return [useSelector];\n});\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useState","useSelector","selectCardById","jsxDEV","_jsxDEV","Card","cardId","_s","flipped","setFlipped","card","state","isFlipped","setIsFlipped","children","className","onClick","e","back","front","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Codecademy/flashcards-starting-code-react-v18/src/features/cards/Card.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n// import selector\nimport { selectCardById } from './cardsSlice';\n\nexport default function Card({ cardId  }) {\n  //const card = {}; // replace this with a call to your selector to get a card by id\n  const [flipped, setFlipped] = useState(false);\n  // Retrieve the card details for the given cardId from state\n  const card = useSelector(state => selectCardById(state, cardId));\n  const [isFlipped, setIsFlipped] = useState(false);\n\n\n  return (\n    <li>\n      <button className=\"card\" onClick={(e) => setFlipped(!flipped)}>\n        {flipped ? card.back : card.front}\n      </button>\n    </li>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC;AACA,SAASC,cAAc,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,IAAIA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACxC;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C;EACA,MAAMU,IAAI,GAAGT,WAAW,CAACU,KAAK,IAAIT,cAAc,CAACS,KAAK,EAAEL,MAAM,CAAC,CAAC;EAChE,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAGjD,oBACEI,OAAA;IAAAU,QAAA,eACEV,OAAA;MAAQW,SAAS,EAAC,MAAM;MAACC,OAAO,EAAGC,CAAC,IAAKR,UAAU,CAAC,CAACD,OAAO,CAAE;MAAAM,QAAA,EAC3DN,OAAO,GAAGE,IAAI,CAACQ,IAAI,GAAGR,IAAI,CAACS;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAET;AAAChB,EAAA,CAfuBF,IAAI;EAAA,QAIbJ,WAAW;AAAA;AAAAuB,EAAA,GAJFnB,IAAI;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}